<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>disable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <PlatformTarget>x64</PlatformTarget>
    <RootNamespace>Egodystonic.TinyFFR</RootNamespace>
    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>
    <Platforms>x64</Platforms>
    <IncludeSymbols>False</IncludeSymbols>
    <RunAnalyzersDuringBuild>True</RunAnalyzersDuringBuild>
    <RunAnalyzersDuringLiveAnalysis>True</RunAnalyzersDuringLiveAnalysis>
    <AnalysisLevel>latest-all</AnalysisLevel>
    <NoWarn>
      $(NoWarn);
      1701;
      1702;
      CA1000; <!-- Do not declare static members on generic types: Rule is overzealous (sometimes it makes sense even despite the considerations for readability) -->
      CA2225; <!-- Provide a method named 'x' as a friendly alternate for operator op_X: Most operators do have named methods provided too, just not always using recommended nomenclature (for ease of understanding) -->
      CA1033; <!-- Make '...' sealed [...]: Fires on interfaces with implementations erroneously -->
      CA1805; <!-- Member explicitly initialized to default value: It communicates that was you intention and that you didn't just forget to initialize a member. Performance isn't that much of a requirement -->
      CA1040; <!-- Do not use empty interfaces: Sometimes there are good reasons -->
      CA5394; <!-- 'Random' class isn't crypto-secure: We don't need crypto-level randomness (and we prefer performance) -->
      CA1725; <!-- Don't rename parameters when implementing methods from inherited/implemented parents/interfaces: Generally agree but we have some very generalized interfaces and renaming the parameter names to be more specific downstream is probably better for the end user -->
      CA1720; <!-- Don't name members simply as type names (e.g. "pointer" or "integer"): Designed to protect users against bad non-descriptive naming, but overly-opinionated. -->
      CA1822; <!-- Instance method could be static: Not necessarily a bad note all the time, but I often leave members that *could* be static right now as instance because that's what makes sense in an abstract sense for the object API, even if that method doesn't actually touch instance state right now -->
      CA1711; <!-- Strange rule around variable naming suffixes. Doesn't make much sense IMO -->
      CA1028; <!-- Warning prompting to make enums backed by int32 only: Seems mostly there to deter people making enums backed by e.g. byte under a misguided assumption of some sort of performance gain. Not useful for us -->
      CA1716; <!-- Rule regarding not using same name for identifiers as some built-in types: Not a concern for us currently, rule is a bit sledgehammery -->
      IDE0028; <!-- Prompt to use collection initializers: Sometimes I don't want them -->
      IDE0040; <!-- Always include access modifiers (even when it would be the default): Just plain don't like this style -->
      IDE1006; <!-- Underscore for private const fields: Yuck -->
    </NoWarn>
    <BaseIntermediateOutputPath>..\build_output\intermediate</BaseIntermediateOutputPath>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>
    <Configurations>Debug;Release;Optimized</Configurations>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <GenerateTargetFrameworkAttribute>false</GenerateTargetFrameworkAttribute>
  </PropertyGroup>

  <!-- 
  Package publish steps (for now):
    Update package version below, add -rc001 for testing and increment rc version for each test
    Put in Release configuration
    Rebuild whole solution, then build this project one more time because it doesn't include the built DLL/LIBs from the first build (this needs to be improved)
      (may need to make an edit to this file and undo it to trigger the build system to not skip the project)
    Copy the built nupkg (from the build_output/Release folder) to local package source
    Reference the nuget package from the Nupkg testing project as a nuget and test
    Once all looks good, do not clean or rebuild or change anything except taking the -rc out from the package version and building JUST THIS PROJECT once more
    Repeat the test with the local source just in case
    If it looks good, upload the nupkg without -rc to nuget.org
  -->
  <PropertyGroup>
    <PackageId>Egodystonic.TinyFFR</PackageId>
    <PackageVersion>0.2.0</PackageVersion> 
    <Authors>Ben Bowen</Authors>
    <Company>Egodystonic Studios</Company>
    <Description>A Tiny Fixed Function Rendering library for C#.</Description>
    <PackageTags>rendering;tinyffr;3d;pbr</PackageTags>
    <RepositoryUrl>https://github.com/Egodystonic/TinyFFR</RepositoryUrl>
    <PackageIcon>logo_128.png</PackageIcon>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageLicenseFile>LICENSE.md</PackageLicenseFile>
    <RuntimeIdentifier>win-x64</RuntimeIdentifier>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)'=='Release'">
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
  </PropertyGroup>
  <ItemGroup>
    <None Include="..\README.md" Pack="true" PackagePath="\" />
    <None Include="..\LICENSE.md" Pack="true" PackagePath="\" />
    <EmbeddedResource Include="Assets\Local\cmgen.exe" />
    <EmbeddedResource Include="Assets\Materials\Local\Shaders\alpha_aware.filamat" />
    <EmbeddedResource Include="Assets\Materials\Local\Shaders\alpha_aware_mask.filamat" />
    <EmbeddedResource Include="logo_128.png" Pack="true" PackagePath="\" />
    <EmbeddedResource Include="Assets\Materials\Local\Shaders\opaque.filamat" />
    <None Include="..\build_output\$(Configuration)\*.dll" Pack="true" PackagePath="\runtimes\win-x64\native\" />
    <None Include="..\build_output\$(Configuration)\*.lib" Pack="true" PackagePath="\runtimes\win-x64\native\" />
  </ItemGroup>

  <PropertyGroup Condition="'$(Configuration)'=='Debug'">
    <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
    <GenerateDocumentationFile>False</GenerateDocumentationFile>
    <OutputPath>..\build_output\Debug</OutputPath>
    <NoWarn> <!-- Warnings in this section are annoying while developing but we want them on when building release build -->
      $(NoWarn);
      IDE0060; <!-- Delete unused parameters etc -->
      CA1062; <!-- Validate parameters for null before usage -->
      CA1823; <!-- Unused fields -->
      IDE0052; <!-- Value is never read -->
    </NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'=='Release'">
    <TreatWarningsAsErrors>True</TreatWarningsAsErrors>
    <!-- We will generate documentation for v1.0+ -->
    <GenerateDocumentationFile>False</GenerateDocumentationFile>
    <OutputPath>..\build_output\Release</OutputPath>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'=='Optimized'">
    <TreatWarningsAsErrors>False</TreatWarningsAsErrors>
    <OutputPath>..\build_output\Release</OutputPath>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="Assets\Local\cmgen.exe" />
    <None Remove="Assets\Materials\Local\Shaders\alpha_aware.filamat" />
    <None Remove="Assets\Materials\Local\Shaders\alpha_aware_mask.filamat" />
    <None Remove="Assets\Materials\Local\Shaders\opaque.filamat" />
  </ItemGroup>


</Project>
