material {
    name : Opqaue,
    parameters : [
        {
            type : sampler2d,
            name : color_map
        },
        {
            type : sampler2d,
            name : normal_map
        },
        {
            type : sampler2d,
            name : orm_map
        }
    ],
    requires : [
        uv0
    ],
    shadingModel : lit,
    postLightingBlending : opaque
}

fragment {
    void material(inout MaterialInputs material) {
        vec2 uv0 = getUV0();
        material.normal = texture(materialParams_normal_map, uv0).xyz * 2.0 - 1.0;
        
        prepareMaterial(material);
        
        material.baseColor.rgb = texture(materialParams_color_map, uv0).rgb;
        
        material.ambientOcclusion = texture(materialParams_orm_map, uv0).r;
        material.roughness = texture(materialParams_orm_map, uv0).g;
        material.metallic = texture(materialParams_orm_map, uv0).b;
        
        //material.postLightingColor.rgb = texture(materialParams_normal_map, uv0).xyz * 2.0 - 1.0;
        //material.postLightingColor.rgb = ((getWorldTangentFrame()[2] + 1.0) / 2.0).xyz;
        //material.postLightingColor.rgb = getWorldTangentFrame()[2] * -1.0;






        ////material.normal = vec3(0.0, 0.0, -1.0);
        //vec2 uv0 = getUV0();
        //material.normal = texture(materialParams_normal_map, uv0).xyz * 2.0 - 1.0;
        //prepareMaterial(material);
        ////material.postLightingColor.rgb = ((getWorldTangentFrame()[2] + 1.0) / 2.0).xyz;
        //material.postLightingColor.rgb = getWorldTangentFrame()[2] * -1.0;
    }
}